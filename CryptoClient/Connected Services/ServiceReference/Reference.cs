//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CryptoClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileMetaData", Namespace="http://schemas.datacontract.org/2004/07/CryptoService")]
    [System.SerializableAttribute()]
    public partial class FileMetaData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fileNameField, value) != true)) {
                    this.fileNameField = value;
                    this.RaisePropertyChanged("fileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EncryptTextMessage", Namespace="http://schemas.datacontract.org/2004/07/CryptoService")]
    [System.SerializableAttribute()]
    public partial class EncryptTextMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CryptoClient.ServiceReference.AlgorithmType AlgorithmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FKeyA52Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] IVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] QField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CryptoClient.ServiceReference.AlgorithmType Algorithm {
            get {
                return this.AlgorithmField;
            }
            set {
                if ((this.AlgorithmField.Equals(value) != true)) {
                    this.AlgorithmField = value;
                    this.RaisePropertyChanged("Algorithm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FKeyA52 {
            get {
                return this.FKeyA52Field;
            }
            set {
                if ((object.ReferenceEquals(this.FKeyA52Field, value) != true)) {
                    this.FKeyA52Field = value;
                    this.RaisePropertyChanged("FKeyA52");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] IV {
            get {
                return this.IVField;
            }
            set {
                if ((object.ReferenceEquals(this.IVField, value) != true)) {
                    this.IVField = value;
                    this.RaisePropertyChanged("IV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] P {
            get {
                return this.PField;
            }
            set {
                if ((object.ReferenceEquals(this.PField, value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Q {
            get {
                return this.QField;
            }
            set {
                if ((object.ReferenceEquals(this.QField, value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlgorithmType", Namespace="http://schemas.datacontract.org/2004/07/CryptoService")]
    public enum AlgorithmType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RC4 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RC4CTR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        A52 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        A52CTR = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RSA = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TigerHash = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlgorithmProperties", Namespace="http://schemas.datacontract.org/2004/07/CryptoService")]
    [System.SerializableAttribute()]
    public partial class AlgorithmProperties : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] IVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CryptoClient.ServiceReference.AlgorithmType AlgorithmTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FKeyA52Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] QField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public byte[] IV {
            get {
                return this.IVField;
            }
            set {
                if ((object.ReferenceEquals(this.IVField, value) != true)) {
                    this.IVField = value;
                    this.RaisePropertyChanged("IV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public CryptoClient.ServiceReference.AlgorithmType AlgorithmType {
            get {
                return this.AlgorithmTypeField;
            }
            set {
                if ((this.AlgorithmTypeField.Equals(value) != true)) {
                    this.AlgorithmTypeField = value;
                    this.RaisePropertyChanged("AlgorithmType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string FKeyA52 {
            get {
                return this.FKeyA52Field;
            }
            set {
                if ((object.ReferenceEquals(this.FKeyA52Field, value) != true)) {
                    this.FKeyA52Field = value;
                    this.RaisePropertyChanged("FKeyA52");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public byte[] P {
            get {
                return this.PField;
            }
            set {
                if ((object.ReferenceEquals(this.PField, value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public byte[] Q {
            get {
                return this.QField;
            }
            set {
                if ((object.ReferenceEquals(this.QField, value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadFile", ReplyAction="http://tempuri.org/IService/DownloadFileResponse")]
        System.IO.Stream DownloadFile(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadFile", ReplyAction="http://tempuri.org/IService/DownloadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string name);
        
        // CODEGEN: Generating message contract since the wrapper name (FileUploadMessage) of message FileUploadMessage does not match the default value (UploadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFile", ReplyAction="http://tempuri.org/IService/UploadFileResponse")]
        CryptoClient.ServiceReference.UploadFileResponse UploadFile(CryptoClient.ServiceReference.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFile", ReplyAction="http://tempuri.org/IService/UploadFileResponse")]
        System.Threading.Tasks.Task<CryptoClient.ServiceReference.UploadFileResponse> UploadFileAsync(CryptoClient.ServiceReference.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListFiles", ReplyAction="http://tempuri.org/IService/ListFilesResponse")]
        string[] ListFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListFiles", ReplyAction="http://tempuri.org/IService/ListFilesResponse")]
        System.Threading.Tasks.Task<string[]> ListFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteFile", ReplyAction="http://tempuri.org/IService/DeleteFileResponse")]
        bool DeleteFile(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteFile", ReplyAction="http://tempuri.org/IService/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EncryptText", ReplyAction="http://tempuri.org/IService/EncryptTextResponse")]
        byte[] EncryptText(CryptoClient.ServiceReference.EncryptTextMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EncryptText", ReplyAction="http://tempuri.org/IService/EncryptTextResponse")]
        System.Threading.Tasks.Task<byte[]> EncryptTextAsync(CryptoClient.ServiceReference.EncryptTextMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DecryptText", ReplyAction="http://tempuri.org/IService/DecryptTextResponse")]
        byte[] DecryptText(CryptoClient.ServiceReference.EncryptTextMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DecryptText", ReplyAction="http://tempuri.org/IService/DecryptTextResponse")]
        System.Threading.Tasks.Task<byte[]> DecryptTextAsync(CryptoClient.ServiceReference.EncryptTextMessage message);
        
        // CODEGEN: Generating message contract since the wrapper name (EncryptFileMessage) of message EncryptFileMessage does not match the default value (Encrypt)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Encrypt", ReplyAction="http://tempuri.org/IService/EncryptResponse")]
        CryptoClient.ServiceReference.EncryptFileResponse Encrypt(CryptoClient.ServiceReference.EncryptFileMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Encrypt", ReplyAction="http://tempuri.org/IService/EncryptResponse")]
        System.Threading.Tasks.Task<CryptoClient.ServiceReference.EncryptFileResponse> EncryptAsync(CryptoClient.ServiceReference.EncryptFileMessage request);
        
        // CODEGEN: Generating message contract since the wrapper name (EncryptFileMessage) of message EncryptFileMessage does not match the default value (Decrypt)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Decrypt", ReplyAction="http://tempuri.org/IService/DecryptResponse")]
        CryptoClient.ServiceReference.EncryptFileResponse Decrypt(CryptoClient.ServiceReference.EncryptFileMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Decrypt", ReplyAction="http://tempuri.org/IService/DecryptResponse")]
        System.Threading.Tasks.Task<CryptoClient.ServiceReference.EncryptFileResponse> DecryptAsync(CryptoClient.ServiceReference.EncryptFileMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public CryptoClient.ServiceReference.FileMetaData Metadata;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream Data;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(CryptoClient.ServiceReference.FileMetaData Metadata, System.IO.Stream Data) {
            this.Metadata = Metadata;
            this.Data = Data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool Finished;
        
        public UploadFileResponse() {
        }
        
        public UploadFileResponse(bool Finished) {
            this.Finished = Finished;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EncryptFileMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class EncryptFileMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public CryptoClient.ServiceReference.AlgorithmProperties MetaData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream Data;
        
        public EncryptFileMessage() {
        }
        
        public EncryptFileMessage(CryptoClient.ServiceReference.AlgorithmProperties MetaData, System.IO.Stream Data) {
            this.MetaData = MetaData;
            this.Data = Data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EncryptFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class EncryptFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool Finished;
        
        public EncryptFileResponse() {
        }
        
        public EncryptFileResponse(bool Finished) {
            this.Finished = Finished;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : CryptoClient.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<CryptoClient.ServiceReference.IService>, CryptoClient.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.Stream DownloadFile(string name) {
            return base.Channel.DownloadFile(name);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string name) {
            return base.Channel.DownloadFileAsync(name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CryptoClient.ServiceReference.UploadFileResponse CryptoClient.ServiceReference.IService.UploadFile(CryptoClient.ServiceReference.FileUploadMessage request) {
            return base.Channel.UploadFile(request);
        }
        
        public bool UploadFile(CryptoClient.ServiceReference.FileMetaData Metadata, System.IO.Stream Data) {
            CryptoClient.ServiceReference.FileUploadMessage inValue = new CryptoClient.ServiceReference.FileUploadMessage();
            inValue.Metadata = Metadata;
            inValue.Data = Data;
            CryptoClient.ServiceReference.UploadFileResponse retVal = ((CryptoClient.ServiceReference.IService)(this)).UploadFile(inValue);
            return retVal.Finished;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CryptoClient.ServiceReference.UploadFileResponse> CryptoClient.ServiceReference.IService.UploadFileAsync(CryptoClient.ServiceReference.FileUploadMessage request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<CryptoClient.ServiceReference.UploadFileResponse> UploadFileAsync(CryptoClient.ServiceReference.FileMetaData Metadata, System.IO.Stream Data) {
            CryptoClient.ServiceReference.FileUploadMessage inValue = new CryptoClient.ServiceReference.FileUploadMessage();
            inValue.Metadata = Metadata;
            inValue.Data = Data;
            return ((CryptoClient.ServiceReference.IService)(this)).UploadFileAsync(inValue);
        }
        
        public string[] ListFiles() {
            return base.Channel.ListFiles();
        }
        
        public System.Threading.Tasks.Task<string[]> ListFilesAsync() {
            return base.Channel.ListFilesAsync();
        }
        
        public bool DeleteFile(string filename) {
            return base.Channel.DeleteFile(filename);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string filename) {
            return base.Channel.DeleteFileAsync(filename);
        }
        
        public byte[] EncryptText(CryptoClient.ServiceReference.EncryptTextMessage message) {
            return base.Channel.EncryptText(message);
        }
        
        public System.Threading.Tasks.Task<byte[]> EncryptTextAsync(CryptoClient.ServiceReference.EncryptTextMessage message) {
            return base.Channel.EncryptTextAsync(message);
        }
        
        public byte[] DecryptText(CryptoClient.ServiceReference.EncryptTextMessage message) {
            return base.Channel.DecryptText(message);
        }
        
        public System.Threading.Tasks.Task<byte[]> DecryptTextAsync(CryptoClient.ServiceReference.EncryptTextMessage message) {
            return base.Channel.DecryptTextAsync(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CryptoClient.ServiceReference.EncryptFileResponse CryptoClient.ServiceReference.IService.Encrypt(CryptoClient.ServiceReference.EncryptFileMessage request) {
            return base.Channel.Encrypt(request);
        }
        
        public bool Encrypt(CryptoClient.ServiceReference.AlgorithmProperties MetaData, System.IO.Stream Data) {
            CryptoClient.ServiceReference.EncryptFileMessage inValue = new CryptoClient.ServiceReference.EncryptFileMessage();
            inValue.MetaData = MetaData;
            inValue.Data = Data;
            CryptoClient.ServiceReference.EncryptFileResponse retVal = ((CryptoClient.ServiceReference.IService)(this)).Encrypt(inValue);
            return retVal.Finished;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CryptoClient.ServiceReference.EncryptFileResponse> CryptoClient.ServiceReference.IService.EncryptAsync(CryptoClient.ServiceReference.EncryptFileMessage request) {
            return base.Channel.EncryptAsync(request);
        }
        
        public System.Threading.Tasks.Task<CryptoClient.ServiceReference.EncryptFileResponse> EncryptAsync(CryptoClient.ServiceReference.AlgorithmProperties MetaData, System.IO.Stream Data) {
            CryptoClient.ServiceReference.EncryptFileMessage inValue = new CryptoClient.ServiceReference.EncryptFileMessage();
            inValue.MetaData = MetaData;
            inValue.Data = Data;
            return ((CryptoClient.ServiceReference.IService)(this)).EncryptAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CryptoClient.ServiceReference.EncryptFileResponse CryptoClient.ServiceReference.IService.Decrypt(CryptoClient.ServiceReference.EncryptFileMessage request) {
            return base.Channel.Decrypt(request);
        }
        
        public bool Decrypt(CryptoClient.ServiceReference.AlgorithmProperties MetaData, System.IO.Stream Data) {
            CryptoClient.ServiceReference.EncryptFileMessage inValue = new CryptoClient.ServiceReference.EncryptFileMessage();
            inValue.MetaData = MetaData;
            inValue.Data = Data;
            CryptoClient.ServiceReference.EncryptFileResponse retVal = ((CryptoClient.ServiceReference.IService)(this)).Decrypt(inValue);
            return retVal.Finished;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CryptoClient.ServiceReference.EncryptFileResponse> CryptoClient.ServiceReference.IService.DecryptAsync(CryptoClient.ServiceReference.EncryptFileMessage request) {
            return base.Channel.DecryptAsync(request);
        }
        
        public System.Threading.Tasks.Task<CryptoClient.ServiceReference.EncryptFileResponse> DecryptAsync(CryptoClient.ServiceReference.AlgorithmProperties MetaData, System.IO.Stream Data) {
            CryptoClient.ServiceReference.EncryptFileMessage inValue = new CryptoClient.ServiceReference.EncryptFileMessage();
            inValue.MetaData = MetaData;
            inValue.Data = Data;
            return ((CryptoClient.ServiceReference.IService)(this)).DecryptAsync(inValue);
        }
    }
}
